@startuml
package pacman {
  class Game {
    - maze: Maze
    - pacman: Pacman
    - ghosts: List<Ghost>
    + start(): void
    + stop(): void
    + handleKeyPress(keyCode: int): void
    + update(): void
  }
  class Maze {
    - width: int
    - height: int
    - cells: Cell[][]
    + getWidth(): int
    + getHeight(): int
    + getCell(x: int, y: int): Cell
  }
  abstract class Cell implements GameElement{
    - x: int
    - y: int
    + getX(): int
    + getY(): int
  }
  class Food {
    + eat(): void
  }
  class Wall {
    + collide(): void
  }
  class PowerCell {
    + eat(): void
  }
  abstract class GameCharacter implements GameElement {
    - x: int
    - y: int
    - direction: Direction
    + getX(): int
    + getY(): int
    + getDirection(): Direction
    + move(): void
    + die(): void
  }
  class Pacman {
    + eatDot(): void
    + eatPowerPellet(): void
  }
  class Ghost {
    + chasePacman(): void
    + scatter(): void
  }
  enum Direction {
    UP
    DOWN
    LEFT
    RIGHT
  }
  interface GameElement {
    + getX(): int
    + getY(): int
  }
  GameCharacter <|-- Pacman
  GameCharacter <|-- Ghost
  Game --> Maze
  Game --> Pacman
  Game o-- Ghost
  Cell <|-- Food
  Cell <|-- Wall
  Cell <|-- PowerCell
}
interface Renderer {
  + renderGame(game: Game): void
}
class SwingRenderer{
  + renderGame(game: Game): void
}
class ConsoleRenderer{
  + renderGame(game: Game): void
}
Renderer <|.. SwingRenderer
Renderer <|.. ConsoleRenderer
@enduml