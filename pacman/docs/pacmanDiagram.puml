@startuml
package pacman {
  class Game {
    - maze: Maze
    - pacman: Pacman
    - ghosts: List<Ghost>
    - isRunning: boolean
    - score: int
    - foodCount: int
    - pacmanTimer: Timer
    - ghostTimer: Timer
    + getGhosts(): List<Ghost>
    + start(): void
    + stop(): void
    + restart(): void
    + handleKeyPress(): void
    + startAutomaticMovement(): void
    + startGhostMovement(): void
    + stopGhostMovement(): void
    + update(): void
    + getMaze(): Maze
    + getPacman(): Pacman
    + isRunning(): boolean
    + getScore(): int
    + setScore(): void
    + createMaze(): void
  }
  class Maze {
    - width: int
    - height: int
    - cells: Cell[][]
    + getWidth(): int
    + getHeight(): int
    + getCell(): Cell
    + updateCell(): void
    + getFoodCount(): int
  }
  abstract class Cell implements GameElement{
    - x: int
    - y: int
    + getX(): int
    + getY(): int
    + Cell(): CellType
    + getPosition(): Position
    + isWall(): boolean
    + isFood(): boolean
    + isPower(): boolean
    + isEmpty(): boolean
  }

  abstract class GameCharacter implements GameElement {
    - x: int
    - y: int
    - position: Position
    - direction: Direction
    + getX(): int
    + getY(): int
    + getPosition(): Position
    + getDirection(): Direction
    + setDirection(): Direction
    + move(): Position
    + die(): void
  }
  class Pacman {
    + eatDot(): void
    + eatPowerPellet(): void
    + die(): void
    + getNextPosition(): Position
  }
  class Ghost {
    + chasePacman(): Position
    + isWallOrGhostInDirection(): boolean
    + getNextPosition(): Position
    + isWall(): boolean
    + isGhost(): boolean
    + getAlternativeDirections(): List<Direction>
    + die(): void
  }
  class InputPoller{
    - character: Character
    - keyListener: KeyListener
    + keyTyped(): void
    + keyPressed(): void
    + keyReleased(): void
    + InputPoller(): Terminal
    + get(): Character

  }
  enum Direction {
    UP
    DOWN
    LEFT
    RIGHT
  }
  interface GameElement {
    + getX(): int
    + getY(): int
  }
  GameCharacter <|-- Pacman
  GameCharacter <|-- Ghost
  Game --> Maze
  Game --> Pacman
  Game o-- Ghost
  Cell <|-- Food
  Cell <|-- Wall
  Cell <|-- PowerCell
}
interface Renderer {
  + renderGame(game: Game): void
  + close(): void
  + movePacman(): void
  + moveGhost(): void
  + printWinScreen(): void
}
class SwingRenderer{
  + renderGame(game: Game): void
}
class ConsoleRenderer{
  - terminal: Terminal
  - screen: Screen
  - keyStroke: KeyStroke
  - game: Game
  + renderGame(game: Game): void
  + printMaze(maze: Maze): void
  + readUserInput(terminal: Terminal): void
  + movePacman(previousPosition: Position): void
  + moveGhost(ghost: Ghost, previousPosition: Position): void
  + printCharacter(pacman: Pacman): void
  + printCharacter(pacman: Pacman, previousPosition: Position): void
  + printCharacter(ghost: Ghost): void
  + printCharacter(ghost: Ghost, previousPosition: Position): void
  + printCell(position: Position): void
  + printFood(position: Position): void
  + printWall(position: Position): void
  + printScore(): void
  + printStartScreen(): void
  + printWinScreen(): void
  + startGame(): void
  + close(): void
  + makeWindowVisible(terminal: Terminal): void
  + refresh(): void

}
Renderer <|.. SwingRenderer
Renderer <|.. ConsoleRenderer
@enduml